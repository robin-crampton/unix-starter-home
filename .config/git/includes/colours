# vim: ft=gitconfig

# From Documentation/config.txt.
# color::
#        The value for a variable that takes a color is a list of
#        colors (at most two, one for foreground and one for background)
#        and attributes (as many as you want), separated by spaces.
# +
# The basic colors accepted are `normal`, `black`, `red`, `green`, `yellow`,
# `blue`, `magenta`, `cyan` and `white`.  The first color given is the
# foreground; the second is the background.
# +
# Colors may also be given as numbers between 0 and 255; these use ANSI
# 256-color mode (but note that not all terminals may support this).  If
# your terminal supports it, you may also specify 24-bit RGB values as
# hex, like `#ff0ab3`.
# +
# The accepted attributes are `bold`, `dim`, `ul`, `blink`, `reverse`,
# `italic`, and `strike` (for crossed-out or "strikethrough" letters).
# The position of any attributes with respect to the colors
# (before, after, or in between), doesn't matter. Specific attributes may
# be turned off by prefixing them with `no` or `no-` (e.g., `noreverse`,
# `no-ul`, etc).
# +
# An empty color string produces no color effect at all. This can be used
# to avoid coloring specific elements without disabling color entirely.
# +
# For git's pre-defined color slots, the attributes are meant to be reset
# at the beginning of each item in the colored output. So setting
# `color.decorate.branch` to `black` will paint that branch name in a
# plain `black`, even if the previous thing on the same output line (e.g.
# opening parenthesis before the list of branch names in `log --decorate`
# output) is set to be painted with `bold` or some other attribute.
# However, custom log formats may do more complicated and layered
# coloring, and the negated forms may be useful there.

[color "branch"]
# From builtin/branch.c
#plain = normal
#remote = red
#local = normal
#current = green
#reset = normal
#upstream = blue
current = green

[color "clean"]
# From builtin/clean.c
#error = bold red
#header = bold
#help = bold red
#plain = normal
#prompt = bold blue
#reset = normal

[color "decorate"]
# From log-tree.c
#branch = bold green
#remoteBranch = bold red
#tag = bold yellow
#stash = bold magenta
#HEAD = bold cyan
branch = "#608b4e"
remoteBranch = "#d25252"
tag = "#d9e577"
HEAD = "#569cd6"

[color "diff"]
# From diff.c
#context = normal
#plain =   # Synonym for context.
#meta = bold
#frag = cyan
#old = red
#new = green
#commit = yellow
#whitespace = "#ffff80 #333333"
#func = normal
#oldmoved = bold magenta
#oldmovedalternative = bold blue
#oldmoveddimmed = dim
#oldmovedalternativedimmed = dim italic
#newmoved = bold cyan
#newmovedalternative = bold yellow
#newmoveddimmed = dim
#newmovedalternativedimmed = dim italic
meta = "#808080"
frag = "#4ec9b0"
old = "#d25252"
new = "#73c991"
commit = "#808080"   # This also affects git log.
#whitespace = "#7ab8b8"
whitespace = reverse


[color "status"]
# From builtin/commit.c and wt-status.c (wt = work tree)
#header = normal
#branch =   # GIT_COLOR_NIL
#updated = green
##added =   # Synonym for updated.
#changed = red
#untracked = red
#nobranch = red
#unmerged = red
#localBranch = green
#remoteBranch = red
updated = "#81b88b"
changed = "#e2c08d"
untracked = "#73c991"
